openapi: 3.0.0

info:
  title: Authentication Service
  version: 2.0.4
  description: A service that handles authentication through OAuth

paths:

  /applications:
    post:
      tags:
        - Applications
      summary: Create an OAuth application
      description: |
        Permission | Scope | Effect
        - | - | -
        `CREATE_APPLICATIONS` | `global` | **Required** for this endpoint
      requestBody:
        content:
          application/json:
            schema:
              example:
                type: oauth2
                description: Test App
                name: Test
              oneOf:
                - $ref: '#/components/schemas/OAuth2ApplicationCreationSchema'
                - $ref: '#/components/schemas/OAuth1ApplicationCreationSchema'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  id: '507f191e810c19729de860ea'
                  type: oauth2
                  description: Test App
                  name: Test
                  updateTimestamp: '2019-04-15T11:23:19.670Z'
                  creationTimestamp: '2019-04-15T11:23:19.670Z'
                oneOf:
                  - $ref: '#/components/schemas/OAuth2Application'
                  - $ref: '#/components/schemas/OAuth1Application'

    get:
      tags:
        - Applications
      summary: Get a list of applications
      description: |
        Permission | Scope | Effect
        - | - | -
        none | | Returns a limited set of fields of the list (only name, description, logo and type fields)
        `VIEW_APPLICATIONS` | `global` | Returns all fields of the list
      parameters:
        - $ref: '#/components/parameters/rqlOptional'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                  allOf:
                    - $ref: '#/components/schemas/PagedResult'
                    - type: object
                      properties:
                        data:
                          type: array
                          items:
                            oneOf:
                              - $ref: '#/components/schemas/OAuth2Application'
                              - $ref: '#/components/schemas/OAuth1Application'

  /applications/{applicationId}:
    parameters:
      - in: path
        name: applicationId
        schema:
          $ref: '#/components/schemas/ObjectId'
        required: true
        description: Id of the application

    put:
      tags:
        - Applications
      summary: Update an OAuth application
      description: |
        Currently it is required to send the `type` field with the same value as
        the application you're about to update. in the future this will be
        updated so that the type field will be ignored and is no longer
        required.

        Permission | Scope | Effect
        - | - | -
        `UPDATE_APPLICATIONS` | `global` | **Required** for this endpoint
      requestBody:
        content:
          application/json:
            schema:
              example:
                type: oauth2
                description: New description
                name: New name
              oneOf:
                - $ref: '#/components/schemas/OAuth2ApplicationUpdateSchema'
                - $ref: '#/components/schemas/OAuth1ApplicationUpdateSchema'
      responses:
        200:
          $ref: '#/components/responses/OperationSuccessful'
        404:
          description: Error response
          content:
            application/json:
              examples:
                '16: RESOURCE_UNKNOWN_EXCEPTION':
                  value:
                    code: 16
                    name: 'RESOURCE_UNKNOWN_EXCEPTION'
                    message: Requested resource is unknown
                  description: |
                    - The specified application id and type combination does not exist
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Applications
      summary: Delete an application
      description: |
        Permission | Scope | Effect
        - | - | -
        `DELETE_APPLICATIONS` | `global` | **Required** for this endpoint
      responses:
        200:
          $ref: '#/components/responses/OperationSuccessful'
        404:
          description: Error response
          content:
            application/json:
              examples:
                '16: RESOURCE_UNKNOWN_EXCEPTION':
                  value:
                    code: 16
                    name: 'RESOURCE_UNKNOWN_EXCEPTION'
                    message: Requested resource is unknown
                  description: |
                    - The specified application id does not exist
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /applications/{applicationId}/versions:
    parameters:
      - in: path
        name: applicationId
        schema:
          $ref: '#/components/schemas/ObjectId'
        required: true
        description: Id of the application

    post:
      tags:
        - Applications
      summary: Create an application version
      description: |
        Permission | Scope | Effect
        - | - | -
        `CREATE_APPLICATIONS` | `global` | **Required** for this endpoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationVersionCreationData'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  id: '507f191e810c19729de860ea'
                  name: Version 1
                  clientId: '0f4061a353c848eb0e02b80a2fe7bbc2254f1f77'
                  clientSecret: '1f4221a223c848eb0e02b80a2fe7bbc2254f1f33'
                  creationTimestamp: '2019-04-15T11:23:19.670Z'
                oneOf:
                  - $ref: '#/components/schemas/OAuth2ApplicationVersion'
                  - $ref: '#/components/schemas/OAuth1ApplicationVersion'
        400:
          description: Error response
          content:
            application/json:
              examples:
                '17: RESOURCE_ALREADY_EXISTS_EXCEPTION':
                  value:
                    code: 17
                    name: 'RESOURCE_ALREADY_EXISTS_EXCEPTION'
                    message: This resource already exists
                '26: ILLEGAL_ARGUMENT_EXCEPTION':
                  value:
                    code: 26
                    name: 'ILLEGAL_ARGUMENT_EXCEPTION'
                    message: The supplied argument(s) is not appropriate within this context
                  description: |
                    - The specified application type is not `oauth1` or `oauth2`
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Error response
          content:
            application/json:
              examples:
                '16: RESOURCE_UNKNOWN_EXCEPTION':
                  value:
                    code: 16
                    name: 'RESOURCE_UNKNOWN_EXCEPTION'
                    message: Requested resource is unknown
                  description: |
                    - The specified application id does not exist
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /applications/{applicationId}/versions/{versionId}:
    parameters:
      - in: path
        name: applicationId
        schema:
          $ref: '#/components/schemas/ObjectId'
        required: true
        description: Id of the application
      - in: path
        name: versionId
        schema:
          $ref: '#/components/schemas/ObjectId'
        required: true
        description: Id of the version

    delete:
      tags:
        - Applications
      summary: Delete an application version
      description: |
        Permission | Scope | Effect
        - | - | -
        `DELETE_APPLICATIONS` | `global` | **Required** for this endpoint
      responses:
        200:
          $ref: '#/components/responses/OperationSuccessful'
        404:
          description: Error response
          content:
            application/json:
              examples:
                '16: RESOURCE_UNKNOWN_EXCEPTION':
                  value:
                    code: 16
                    name: 'RESOURCE_UNKNOWN_EXCEPTION'
                    message: Requested resource is unknown
                  description: |
                    - The specified application id and version id combination does not exist
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /oauth2/authorizations:
    post:
      tags:
        - OAuth2
      summary: Create an OAuth2 authorization
      description: |
        Permission | Scope | Effect
        - | - | -
        none | | Everyone can use this endpoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuth2AuthorizationCreationSchema'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Authorization'
        400:
          description: Error response
          content:
            application/json:
              examples:
                '103: APPLICATION_UNKNOWN_EXCEPTION':
                  value:
                    code: 103
                    name: 'APPLICATION_UNKNOWN_EXCEPTION'
                    message: This associated application is unknown
                '113: CALLBACK_NOT_VALID':
                  value:
                    code: 113
                    name: 'CALLBACK_NOT_VALID'
                    message: The requested callback is not associated with this application
                '114: UNSUPPORTED_RESPONSE_TYPE':
                  value:
                    code: 114
                    name: 'UNSUPPORTED_RESPONSE_TYPE'
                    message: The requested response type is not supported
                  description: |
                    - The specified responseType is not `code`
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    get:
      tags:
        - OAuth2
      summary: Get a list of OAuth2 Authorizations
      description: |
        Permission | Scope | Effect
        - | - | -
        `VIEW_AUTHORIZATIONS` | `global` | **Required** for this endpoint
      parameters:
        - $ref: '#/components/parameters/rqlOptional'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PagedResult'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/OAuth2Authorization'

  /oauth2/authorizations/{authorizationId}:
    parameters:
      - in: path
        name: authorizationId
        schema:
          $ref: '#/components/schemas/ObjectId'
        required: true
        description: Id of the Authorization

    delete:
      tags:
        - OAuth2
      summary: Delete an OAuth2 Authorization
      description: |
        Permission | Scope | Effect
        - | - | -
        `DELETE_AUTHORIZATIONS` | `global` | **Required** for this endpoint
      responses:
          200:
            $ref: '#/components/responses/OperationSuccessful'
          404:
            description: Error response
            content:
              application/json:
                examples:
                  '16: RESOURCE_UNKNOWN_EXCEPTION':
                    value:
                      code: 16
                      name: 'RESOURCE_UNKNOWN_EXCEPTION'
                      message: Requested resource is unknown
                    description: |
                      - The specified authorization id does not exist
                schema:
                  $ref: "#/components/schemas/ErrorResponse"

  /oauth2/tokens:
    post:
      tags:
        - OAuth2
      summary: Create an OAuth2 token
      description: |
        Permission | Scope | Effect
        - | - | -
        none | | Everyone can use this endpoint
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                grant_type: password
                username: development@qompium.com
                password: development
                clientId: '0f4061a353c848eb0e02b80a2fe7bbc2254f1f77'
              oneOf:
                - $ref: '#/components/schemas/OAuth2PasswordGrant'
                - $ref: '#/components/schemas/OAuth2RefreshTokenGrant'
                - $ref: '#/components/schemas/OAuth2AuthorizationCodeGrant'
      responses:
          200:
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/OAuth2TokenCreationResponse'
          400:
            description: OAuth2 Error response, see https://tools.ietf.org/html/rfc6749#section-5.2
            content:
              application/json:
                examples:
                  'invalid_request':
                    value:
                      error: invalid_request
                      description: The request is incomplete or incorrect
                    description: |
                      Possible values for the description property:
                      - The request body is empty
                      - malformed body: ...
                      - unidentified error detected: ...
                  'invalid_grant':
                    value:
                      error: invalid_grant
                      description: The data supplied for the grant is incomplete or incorrect
                    description: |
                      Possible values for the description property:
                      - Client does not exist
                      - The associated authorization is unknown
                      - The associated authorization is expired
                      - This password email combination is unknown
                      - The requested callback is not associated with this application
                      - Invalid PKCE values provided
                      - Missing PKCE verifier
                      - The refresh token is unknown
                      - The refresh token is expired
                      - The supplied MFA code is incorrect
                      - The supplied MFA token is not (or no longer) valid
                  'unsupported_grant_type':
                    value:
                      error: unsupported_grant_type
                      description: Invalid grant type provided
                  'mfa_required':
                    value:
                      See status code `x-400-MFA-required` of this endpoint for more information
                    description: |
                      See status code `x-400-MFA-required` of this endpoint for more information
                schema:
                  $ref: '#/components/schemas/OAuth2ErrorResponse'
          401:
            description: OAuth2 Error response, see https://tools.ietf.org/html/rfc6749#section-5.2
            content:
              application/json:
                examples:
                  'invalid_client':
                    value:
                      error: invalid_client
                      description: Something wrong with the client
                    description: |
                      Possible values for the description property:
                      - Requested resource is unknown
                      - Client credentials are missing in request
                      - Client is not authorized
                schema:
                  $ref: '#/components/schemas/OAuth2ErrorResponse'
          x-400-MFA-required:
            description: |
              Logging in with email and password for a user with MFA enabled will result in this error.
              Note: The `x-400-MFA-required` is not the real status code. The real status code will be `400`
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: mfa_required
                    description:
                      type: string
                      example: Multifactor authentication is required for this user
                    mfa:
                      $ref: '#/components/schemas/MfaRequiredErrorData'

    get:
      tags:
        - OAuth2
      summary: Get a list of OAuth2 tokens
      description: |
        Permission | Scope | Effect
        - | - | -
        `VIEW_AUTHORIZATIONS` | `global` | **Required** for this endpoint
      parameters:
        - $ref: '#/components/parameters/rqlOptional'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                  allOf:
                    - $ref: '#/components/schemas/PagedResult'
                    - type: object
                      properties:
                        data:
                          type: array
                          items:
                            $ref: '#/components/schemas/OAuth2Token'

  /oauth2/tokens/{tokenId}:
    parameters:
      - in: path
        name: tokenId
        schema:
          $ref: '#/components/schemas/ObjectId'
        required: true
        description: Id of the Token

    delete:
      tags:
        - OAuth2
      summary: Delete an OAuth2 token
      description: |
        Permission | Scope | Effect
        - | - | -
        `DELETE_AUTHORIZATIONS` | `global` | **Required** for this endpoint
      responses:
          200:
            $ref: '#/components/responses/OperationSuccessful'
          404:
            description: Error response
            content:
              application/json:
                examples:
                  '16: RESOURCE_UNKNOWN_EXCEPTION':
                    value:
                      code: 16
                      name: 'RESOURCE_UNKNOWN_EXCEPTION'
                      message: Requested resource is unknown
                    description: |
                      - The specified token id does not exist
                schema:
                  $ref: "#/components/schemas/ErrorResponse"

  /oauth1/tokens:
    post:
      tags:
        - OAuth1
      summary: Create an OAuth1 token
      description: |
        Permission | Scope | Effect
        - | - | -
        none | | Everyone can use this endpoint
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: aladdin@exhz.io
                password:
                  type: string
                  example: open sesame
      responses:
          200:
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/OAuth1Token'
          401:
            description: Error response
            content:
              application/json:
                examples:
                  '101: APPLICATION_NOT_AUTHENTICATED_EXCEPTION':
                    value:
                      code: 101
                      name: 'APPLICATION_NOT_AUTHENTICATED_EXCEPTION'
                      message: The X-Forwarded-Application header is required
                    description: |
                      - The X-Forwarded-Application header is required
                      - The authenticated application is not a valid oauth1 application
                  '106: AUTHENTICATION_EXCEPTION':
                    value:
                      code: 106
                      name: 'AUTHENTICATION_EXCEPTION'
                      message: This password email combination is unknown
                  '211: LOGIN_TIMEOUT_EXCEPTION':
                    value:
                      code: 211
                      name: 'LOGIN_TIMEOUT_EXCEPTION'
                      message: Login attempt too fast
                  '212: LOGIN_FREEZE_EXCEPTION':
                    value:
                      code: 212
                      name: 'LOGIN_FREEZE_EXCEPTION'
                      message: Login timeout in progress, too many failed login attempts
                  '213: TOO_MANY_FAILED_ATTEMPTS_EXCEPTION':
                    value:
                      code: 213
                      name: 'TOO_MANY_FAILED_ATTEMPTS_EXCEPTION'
                      message: Account is locked due to too many failed login attempts
                schema:
                  $ref: "#/components/schemas/ErrorResponse"
          403:
            description: Error response
            content:
              application/json:
                examples:
                  '129: MFA_REQUIRED_EXCEPTION':
                    value:
                      code: 129
                      name: 'MFA_REQUIRED_EXCEPTION'
                      message: Multifactor authentication is required for this user
                      mfa:
                        token: '3e9a827ed143c14e33617315c15789134367224c'
                        tokenExipresIn: 900000
                        methods:
                          - id: '507f191e810c19729de860ea'
                            type: totp
                            name: Google Authenticator
                            tags:
                              - selected
                    description: |
                      Logging in with email and password for a user with MFA enabled will result in this error.
                schema:
                  allOf:
                    - $ref: '#/components/schemas/ErrorResponse'
                    - type: object
                      properties:
                        mfa:
                          $ref: '#/components/schemas/MfaRequiredErrorData'

    get:
      tags:
        - OAuth1
      summary: Get a list of OAuth1 tokens
      description: |
        Permission | Scope | Effect
        - | - | -
        none | | Can only see a list of OAuth1 tokens for this account
        `VIEW_AUTHORIZATIONS` | `global` | Can see a list of OAuth1 tokens for any account
      parameters:
        - $ref: '#/components/parameters/rqlOptional'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                  allOf:
                    - $ref: '#/components/schemas/PagedResult'
                    - type: object
                      properties:
                        data:
                          type: array
                          items:
                            $ref: '#/components/schemas/OAuth1Token'

  /oauth1/tokens/mfa:
    post:
      tags:
        - OAuth1
      summary: Create a token with MFA credentials
      description: |
        Permission | Scope | Effect
        - | - | -
        none | | Everyone can use this endpoint
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  $ref: '#/components/schemas/Hex40'
                methodId:
                  $ref: '#/components/schemas/ObjectId'
                code:
                  type: string
                  example: dba41658
      responses:
          200:
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/OAuth1Token'
          400:
            description: Error response
            content:
              application/json:
                examples:
                  '130: INVALID_MFA_CODE_EXCEPTION':
                    value:
                      code: 130
                      name: 'INVALID_MFA_CODE_EXCEPTION'
                      message: The supplied MFA code is incorrect
                    description: |
                      - The supplied MFA code is incorrect
                  '131: INVALID_MFA_TOKEN_EXCEPTION':
                    value:
                      code: 131
                      name: 'INVALID_MFA_TOKEN_EXCEPTION'
                      message: The supplied MFA token is not (or no longer) valid
                    description: |
                      - The supplied MFA token is not (or no longer) valid
                      - The authenticated application is not a valid oauth1 application
                  '134: MFA_REATTEMPT_DELAY_EXCEPTION':
                    value:
                      code: 134
                      name: 'MFA_REATTEMPT_DELAY_EXCEPTION'
                      message: The MFA authentication attempt was too soon after a failed attempt
                schema:
                  $ref: "#/components/schemas/ErrorResponse"
          401:
            description: Error response
            content:
              application/json:
                examples:
                  '103: APPLICATION_UNKOWN_EXCEPTION':
                    value:
                      code: 103
                      name: 'APPLICATION_UNKOWN_EXCEPTION'
                      message: The X-Forwarded-Application is not a valid application
                    description: |
                      - The X-Forwarded-Application header is required
                      - The authenticated application is not a valid oauth1 application
                schema:
                  $ref: "#/components/schemas/ErrorResponse"
          404:
            description: Error response
            content:
              application/json:
                examples:
                  '16: RESOURCE_UNKNOWN_EXCEPTION':
                    value:
                      code: 16
                      name: 'RESOURCE_UNKNOWN_EXCEPTION'
                      message: Requested resource is unknown
                    description: |
                      - No MFA method was found for the specified value
                      - The specified MFA method can not be used because it has not been verified yet
                schema:
                  $ref: "#/components/schemas/ErrorResponse"

  /oauth1/tokens/{tokenId}:
    parameters:
      - in: path
        name: tokenId
        schema:
          $ref: '#/components/schemas/ObjectId'
        required: true
        description: Id of the Token

    delete:
      tags:
        - OAuth1
      summary: Delete a token
      description: |
        Permission | Scope | Effect
        - | - | -
        none | | Can remove the OAuth1 tokens for this account
        `VIEW_AUTHORIZATIONS` | `global` | Can remove any OAuth1 tokens of any account
      responses:
          200:
            $ref: '#/components/responses/OperationSuccessful'

  /oauth1/ssoTokens/generate:
    post:
      tags:
        - OAuth1
        - SSO
      summary: Generate an SSO token with OAuth 1 authentication
      description: |
        Permission | Scope | Effect
        - | - | -
        none | | Everyone can use this endpoint
      responses:
          200:
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SsoToken'
          401:
            description: Error response
            content:
              application/json:
                examples:
                  '101: APPLICATION_NOT_AUTHENTICATED_EXCEPTION':
                    value:
                      code: 101
                      name: 'APPLICATION_NOT_AUTHENTICATED_EXCEPTION'
                      message: The X-Forwarded-Application header is required
                    description: |
                      - The X-Forwarded-Application header is required
                      - The authenticated application is not a valid oauth1 application
                  '104: USER_NOT_AUTHENTICATED_EXCEPTION':
                    value:
                      code: 104
                      name: 'USER_NOT_AUTHENTICATED_EXCEPTION'
                      message: User is not authenticated
                schema:
                  $ref: "#/components/schemas/ErrorResponse"

  /oauth1/ssoTokens/consume:
    post:
      tags:
        - OAuth1
        - SSO
      summary: Consume an SSO token to get OAuth 1 tokens
      description: |
        Permission | Scope | Effect
        - | - | -
        none | | Everyone can use this endpoint
      responses:
          200:
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/OAuth1Token'
          401:
            description: Error response
            content:
              application/json:
                examples:
                  '101: APPLICATION_NOT_AUTHENTICATED_EXCEPTION':
                    value:
                      code: 101
                      name: 'APPLICATION_NOT_AUTHENTICATED_EXCEPTION'
                      message: The X-Forwarded-Application header is required
                    description: |
                      - The X-Forwarded-Application header is required
                      - The authenticated application is not a valid oauth1 application
                schema:
                  $ref: "#/components/schemas/ErrorResponse"
          404:
            description: Error response
            content:
              application/json:
                examples:
                  '16: RESOURCE_UNKNOWN_EXCEPTION':
                    value:
                      code: 16
                      name: 'RESOURCE_UNKNOWN_EXCEPTION'
                      message: Requested resource is unknown
                    description: |
                      - The specified token is expired
                schema:
                  $ref: "#/components/schemas/ErrorResponse"

  /confirmPresence:
    post:
      tags:
        - Confirm presence
      summary: Generate a presence token by supplying a secret to confirm the presence of the owner of the account
      description: |
        Permission | Scope | Effect
        - | - | -
        none | | Everyone can use this endpoint
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: secret
              required:
                - password
      responses:
          200:
            description: Success
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    token:
                      $ref: '#/components/schemas/Hex40'
                    expiryTimestamp:
                      type: string
                      format: date-time
                    creationTimestamp:
                      type: string
                      format: date-time
          401:
            description: Error response
            content:
              application/json:
                examples:
                  '104: USER_NOT_AUTHENTICATED_EXCEPTION':
                    value:
                      code: 104
                      name: 'USER_NOT_AUTHENTICATED_EXCEPTION'
                      message: User is not authenticated
                  '106: AUTHENTICATION_EXCEPTION':
                    value:
                      code: 106
                      name: 'AUTHENTICATION_EXCEPTION'
                      message: This password email combination is unknown
                  '211: LOGIN_TIMEOUT_EXCEPTION':
                    value:
                      code: 211
                      name: 'LOGIN_TIMEOUT_EXCEPTION'
                      message: Login attempt too fast
                  '212: LOGIN_FREEZE_EXCEPTION':
                    value:
                      code: 212
                      name: 'LOGIN_FREEZE_EXCEPTION'
                      message: Login timeout in progress, too many failed login attempts
                  '213: TOO_MANY_FAILED_ATTEMPTS_EXCEPTION':
                    value:
                      code: 213
                      name: 'TOO_MANY_FAILED_ATTEMPTS_EXCEPTION'
                      message: Account is locked due to too many failed login attempts
                schema:
                  $ref: "#/components/schemas/ErrorResponse"

  /mfa/users/{userId}:
    get:
      tags:
      - MFA
      summary: View the MFA settings of a user (or create the settings if they have none)
      description: |-
        Permission | Scope | Effect
        - | - | -
        none | | See your own MFA settings
        `VIEW_USER_MFA_SETTINGS` | `global` | See anyone their MFA settings
      parameters:
      - $ref: '#/components/parameters/userId'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MfaUser'

  /mfa/users/{userId}/enable:
    post:
      tags:
      - MFA
      summary: Enable MFA for a user
      description: |-
        Permission | Scope | Effect
        - | - | -
        none | | Enable MFA for your own account
        `UPDATE_USER_MFA_SETTINGS` | `global` | Enable MFA for any account
      parameters:
      - $ref: '#/components/parameters/userId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                presenceToken:
                  $ref: '#/components/schemas/Hex40'
      responses:
        200:
          $ref: '#/components/responses/OperationResult'
        400:
          description: Error response
          content:
            application/json:
              examples:
                '132: INVALID_PRESENCE_TOKEN_EXCEPTION':
                  value:
                    code: 132
                    name: 'INVALID_PRESENCE_TOKEN_EXCEPTION'
                    message: The supplied presence token is not (or no longer) valid
                  description: |
                    - The supplied presence token is not a valid token
                    - The supplied presence token is no longer valid (expired)
                '133: NOT_ENOUGH_MFA_METHODS_EXCEPTION':
                  value:
                    code: 133
                    name: 'NOT_ENOUGH_MFA_METHODS_EXCEPTION'
                    message: For MFA to be enabled at least one verified MFA method is required
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /mfa/users/{userId}/disable:
    post:
      tags:
      - MFA
      summary: Disable MFA for a user
      description: |-
        Permission | Scope | Effect
        - | - | -
        none | | Disable MFA for your own account
        `UPDATE_USER_MFA_SETTINGS` | `global` | Disable MFA for any account
      parameters:
      - $ref: '#/components/parameters/userId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                presenceToken:
                  $ref: '#/components/schemas/Hex40'
      responses:
        200:
          $ref: '#/components/responses/OperationResult'
        400:
          description: Error response
          content:
            application/json:
              examples:
                '132: INVALID_PRESENCE_TOKEN_EXCEPTION':
                  value:
                    code: 132
                    name: 'INVALID_PRESENCE_TOKEN_EXCEPTION'
                    message: The supplied presence token is not (or no longer) valid
                  description: |
                    - The supplied presence token is not a valid token
                    - The supplied presence token is no longer valid (expired)

  /mfa/users/{userId}/methods:
    post:
      tags:
      - MFA
      summary: Add a MFA method to a user
      description: |-
        Permission | Scope | Effect
        - | - | -
        none | | Add a MFA method to your user
        `UPDATE_USER_MFA_SETTINGS` | `global` | Add a MFA method to any user
      parameters:
      - $ref: '#/components/parameters/userId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                presenceToken:
                  $ref: '#/components/schemas/Hex40'
                type:
                  type: string
                  enum:
                  - totp
                  - recoveryCodes
                name:
                  type: string
                  example: Google Authenticator
                tags:
                  type: array
                  items:
                    type: string
                    example: selected
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MfaMethod'
        400:
          description: Error response
          content:
            application/json:
              examples:
                '132: INVALID_PRESENCE_TOKEN_EXCEPTION':
                  value:
                    code: 132
                    name: 'INVALID_PRESENCE_TOKEN_EXCEPTION'
                    message: The supplied presence token is not (or no longer) valid
                  description: |
                    - The supplied presence token is not a valid token
                    - The supplied presence token is no longer valid (expired)
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # /mfa/users/{userId}/methods/{methodId}/verification/send:
  #   post:
  #     tags:
  #     - MFA
  #     summary: Send a verification to the MFA method for a user.
  #     description: |-
  #       Used for the MFA methods of `type: 'sms'` and `type: 'email'`.
  #       Send an SMS or email to validate the correct functioning of the method before usage.
  #       The `POST /mfa/users/{userId}/methods/{methodId}/verification/confirm` endpoint can be used to complete the verification.

  #       permission | scope | effect
  #       - | - | -
  #       none | | Update your own
  #       `UPDATE_USER` | `global` | Update anyone's
  #     parameters:
  #     - $ref: '#/components/parameters/userId'
  #     - $ref: '#/components/parameters/methodId'
  #     responses:
  #       200:
  #         description: "Success"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/responses/OperationResult'

  /mfa/users/{userId}/methods/{methodId}/verification/confirm:
    post:
      tags:
      - MFA
      summary: Confirm the correct functioning of a MFA method
      description: |-
        The content of the `code` field depends on the `type` of the targeted method.
        - `totp`: The code read from the authenticator app at the current moment

        Permission | Scope | Effect
        - | - | -
        none | | Confirm a MFA method for your user
        `UPDATE_USER_MFA_SETTINGS` | `global` | Confirm a MFA method for any user
      parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/methodId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                presenceToken:
                  $ref: '#/components/schemas/Hex40'
                code:
                  type: string
                  example: 123456
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/responses/OperationResult'
        400:
          description: Error response
          content:
            application/json:
              examples:
                '26: ILLEGAL_ARGUMENT_EXCEPTION':
                  value:
                    code: 26
                    name: 'ILLEGAL_ARGUMENT_EXCEPTION'
                    message: The supplied argument(s) is not appropriate within this context
                  description: |
                    - Only TOTP methods allow verification right now.
                '130: INVALID_MFA_CODE_EXCEPTION':
                  value:
                    code: 130
                    name: 'INVALID_MFA_CODE_EXCEPTION'
                    message: The supplied MFA code is incorrect
                '132: INVALID_PRESENCE_TOKEN_EXCEPTION':
                  value:
                    code: 132
                    name: 'INVALID_PRESENCE_TOKEN_EXCEPTION'
                    message: The supplied presence token is not (or no longer) valid
                  description: |
                    - The supplied presence token is not a valid token
                    - The supplied presence token is no longer valid (expired)
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Error response
          content:
            application/json:
              examples:
                '16: RESOURCE_UNKNOWN_EXCEPTION':
                  value:
                    code: 16
                    name: 'RESOURCE_UNKNOWN_EXCEPTION'
                    message: Requested resource is unknown
                  description: |
                    - The specified MFA method does not exist
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /mfa/users/{userId}/methods/{methodId}/remove:
    post:
      tags:
      - MFA
      summary: Remove a MFA method from a user
      description: |-
        Permission | Scope | Effect
        - | - | -
        none | | Remove a MFA method for your user
        `UPDATE_USER_MFA_SETTINGS` | `global` | Remove a MFA method for any user
      parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/methodId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                presenceToken:
                  $ref: '#/components/schemas/Hex40'
      responses:
        200:
          $ref: '#/components/responses/OperationResult'
        400:
          description: Error response
          content:
            application/json:
              examples:
                '132: INVALID_PRESENCE_TOKEN_EXCEPTION':
                  value:
                    code: 132
                    name: 'INVALID_PRESENCE_TOKEN_EXCEPTION'
                    message: The supplied presence token is not (or no longer) valid
                  description: |
                    - The supplied presence token is not a valid token
                    - The supplied presence token is no longer valid (expired)
                '133: NOT_ENOUGH_MFA_METHODS_EXCEPTION':
                  value:
                    code: 133
                    name: 'NOT_ENOUGH_MFA_METHODS_EXCEPTION'
                    message: For MFA to be enabled at least one verified MFA method is required
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Error response
          content:
            application/json:
              examples:
                '16: RESOURCE_UNKNOWN_EXCEPTION':
                  value:
                    code: 16
                    name: 'RESOURCE_UNKNOWN_EXCEPTION'
                    message: Requested resource is unknown
                  description: |
                    - The specified MFA method does not exist
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # /mfa/challenge/send:
  #   post:
  #     tags:
  #     - MFA
  #     summary: Trigger a challenge for a configured MFA method.
  #     description: |-
  #       The content of the `code` field depends on the `type` of the targeted method.
  #       - `totp`: The code read from the authenticator app at the current moment

  #       permission | scope | effect
  #       - | - | -
  #       none | | No permission is required for this endpoint
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               mfaToken:
  #                 $ref: '#/components/schemas/Hex40'
  #               methodId:
  #                 $ref: '#/components/schemas/ObjectId'
  #     responses:
  #       200:
  #         description: "Success"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/responses/OperationResult'

  /authenticate:
    post:
      tags:
        - Authentication
      summary: Adds authentication headers to a request
      description: |
        This endpoint is only used by the API Gateway
        Permission | Scope | Effect
        - | - | -
        none |  | Everyone can use this endpoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        401:
          description: Error response
          content:
            application/json:
              examples:
                '101: APPLICATION_NOT_AUTHENTICATED_EXCEPTION':
                  value:
                    code: 101
                    name: 'APPLICATION_NOT_AUTHENTICATED_EXCEPTION'
                    message: The X-Forwarded-Application header is required
                '107: OAUTH_KEY_EXCEPTION':
                  value:
                    code: 107
                    name: 'OAUTH_KEY_EXCEPTION'
                    message: The consumer key is unknown
                '108: OAUTH_TOKEN_EXCEPTION':
                  value:
                    code: 108
                    name: 'OAUTH_TOKEN_EXCEPTION'
                    message: The consumer key and token combination is unknown
                '109: OAUTH_SIGNATURE_EXCEPTION':
                  value:
                    code: 109
                    name: 'OAUTH_SIGNATURE_EXCEPTION'
                    message: The oAuth signature is invalid
                  description: |
                    - The oauth parameters are invalid
                    - No oauth_timestamp was set
                    - The oauth_timestamp is invalid
                    - The oauth_timestamp is too far in the past. Please correct your time
                    - The oauth_timestamp is too far in the future. Please correct your time
                '110: DUPLICATE_REQUEST_EXCEPTION':
                  value:
                    code: 110
                    name: 'DUPLICATE_REQUEST_EXCEPTION'
                    message: A request with identical parameters was already received
                '117: ACCESS_TOKEN_UNKNOWN_EXCEPTION':
                  value:
                    code: 117
                    name: 'ACCESS_TOKEN_UNKNOWN_EXCEPTION'
                    message: The access token is unknown
                '118: ACCESS_TOKEN_EXPIRED_EXCEPTION':
                  value:
                    code: 118
                    name: 'ACCESS_TOKEN_EXPIRED_EXCEPTION'
                    message: The access token is expired
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /health:
    get:
      tags:
        - Service health
      summary: Check the service health
      responses:
        200:
          description: Success

components:

  schemas:
    PagedResult:
      type: object
      properties:
        query:
          type: string
          example: "{}"
        page:
          type: object
          properties:
            total:
              type: number
              example: 1
            offset:
              type: number
              example: 0
            limit:
              type: number
              example: 20

    ObjectId:
      type: string
      description: A MongoDB object Id
      example: '507f191e810c19729de860ea'

    OAuth2ErrorResponse:
      type: object
      properties:
        error:
          type: string
          enum: [ 'invalid_grant', 'invalid_client', 'invalid_request', 'unsupported_grant_type' ]
        description:
          type: string
          example: Invalid grant type provided

    AuthenticationRequest:
      type: object
      properties:
        protocol:
          type: string
          enum: ['http', 'https']
        method:
          type: string
          enum: ['GET', 'POST', 'PUT', 'DELETE']
        host:
          type: string
        uri:
          type: string
        headers:
          type: object

    AuthenticationResponse:
      type: object
      properties:
        x-forwarded-application:
          $ref: '#/components/schemas/ObjectId'
        x-forwarded-user:
          $ref: '#/components/schemas/ObjectId'
        additionalProperties:
          type: string

    OAuth2TokenCreationResponse:
      type: object
      properties:
        access_token:
          $ref: '#/components/schemas/Hex40'
        token_type:
          type: string
          example: bearer
        expires_in:
          type: number
          example: 86400
        refresh_token:
          $ref: '#/components/schemas/Hex40'
        user_id:
          $ref: '#/components/schemas/ObjectId'
        application_id:
          $ref: '#/components/schemas/ObjectId'

    OAuth2Token:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ObjectId'
        accessToken:
          $ref: '#/components/schemas/Hex40'
        tokenType:
          type: string
          example: bearer
        expiresIn:
          type: number
          example: 86400
        refreshToken:
          $ref: '#/components/schemas/Hex40'
        userId:
          $ref: '#/components/schemas/ObjectId'
        applicationId:
          $ref: '#/components/schemas/ObjectId'

    ApplicationVersionCreationData:
      type: object
      properties:
        name:
          type: string
          example: Version 1

    OAuth2Application:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ObjectId'
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: ['oauth2']
        versions:
          type: array
          items:
            $ref: '#/components/schemas/OAuth2ApplicationVersion'
        logo:
          type: string
        redirectUris:
          type: array
          items:
            type: string
            example: ['http://example.com', 'http://example.com/callback']
        confidential:
          type: boolean
          default: false
        updateTimestamp:
          type: string
          format: date-time
        creationTimestamp:
          type: string
          format: date-time

    OAuth2ApplicationVersion:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ObjectId'
        name:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
        creationTimestamp:
          type: string
          format: date-time

    OAuth2Authorization:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ObjectId'
        userId:
          $ref: '#/components/schemas/ObjectId'
        clientId:
          $ref: '#/components/schemas/ObjectId'
        authorizationCode:
          type: string
        state:
          type: string
        updateTimestamp:
          type: string
          format: date-time
        creationTimestamp:
          type: string
          format: date-time

    OAuth2AuthorizationCreationSchema:
      type: object
      properties:
        responseType:
          type: string
        clientId:
          type: string
        redirectUri:
          type: string
        state:
          type: string
        scope:
          type: string

    OAuth2ApplicationCreationSchema:
      type: object
      properties:
        type:
          type: string
          enum: ['oauth2']
        name:
          type: string
        description:
          type: string
        logo:
          type: string
        redirectUris:
          type: array
          items:
            type: string
        confidential:
          type: boolean

    OAuth2ApplicationUpdateSchema:
      type: object
      properties:
        type:
          type: string
          enum: ['oauth2']
        name:
          type: string
        description:
          type: string
        logo:
          type: string
        redirectUris:
          type: array
          items:
            type: string

    OAuth2PasswordGrant:
      type: object
      properties:
        grant_type:
          type: string
          enum: ['password']
        username:
          type: string
        password:
          type: string
        client_id:
          type: string
      required:
        - grant_type
        - username
        - password
        - client_id

    OAuth2RefreshTokenGrant:
      type: object
      properties:
        grant_type:
          type: string
          enum: ['refresh_token']
        refresh_token:
          type: string
      required:
        - grant_type
        - refresh_token

    OAuth2AuthorizationCodeGrant:
      type: object
      properties:
        grant_type:
          type: string
          enum: ['authorization_code']
        code:
          type: string
        client_id:
          type: string
        redirect_uri:
          type: string
      required:
        - grant_type
        - code
        - client_id
        - redirect_uri

    OAuth1ApplicationCreationSchema:
      type: object
      properties:
        type:
          type: string
          enum: ['oauth1']
        name:
          type: string
        description:
          type: string

    OAuth1Application:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ObjectId'
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: ['oauth1']
        versions:
          type: array
          items:
            $ref: '#/components/schemas/OAuth1ApplicationVersion'
        updateTimestamp:
          type: string
          format: date-time
        creationTimestamp:
          type: string
          format: date-time

    OAuth1ApplicationVersion:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ObjectId'
        name:
          type: string
        consumerKey:
          type: string
        consumerSecret:
          type: string
        creationTimestamp:
          type: string
          format: date-time

    OAuth1ApplicationUpdateSchema:
      type: object
      properties:
        type:
          type: string
          enum: ['oauth1']
        name:
          type: string
        description:
          type: string

    OAuth1Token:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ObjectId'
        userId:
          $ref: '#/components/schemas/ObjectId'
        applicationId:
          $ref: '#/components/schemas/ObjectId'
        token:
          $ref: '#/components/schemas/Hex40'
        tokenSecret:
          $ref: '#/components/schemas/Hex40'
        lastUsedTimestamp:
          type: string
          format: date-time
        creationTimestamp:
          type: string
          format: date-time

    SsoToken:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ObjectId'
        ssoToken:
          $ref: '#/components/schemas/Hex40'
        userId:
          $ref: '#/components/schemas/ObjectId'
        createdByApplicationId:
          $ref: '#/components/schemas/ObjectId'
        expiryTimestamp:
          type: string
          format: date-time
        creationTimestamp:
          type: string
          format: date-time
        updateTimestamp:
          type: string
          format: date-time

    MfaUser:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ObjectId'
        methods:
          type: array
          items:
            $ref: '#/components/schemas/MfaMethod'
        enabled:
          type: boolean
        updateTimestamp:
          type: string
          format: date-time

    MfaMethod:
      oneOf:
        - $ref: '#/components/schemas/RecoveryCodesMethod'
        - $ref: '#/components/schemas/TotpMethod'

    BaseMfaMethod:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ObjectId'
        name:
          type: string
        tags:
          type: array
          items:
            type: string
            example: selected
        verified:
          type: boolean
        updateTimestamp:
          type: string
          format: date-time
        creationTimestamp:
          type: string
          format: date-time

    RecoveryCodesMethod:
      allOf:
        - $ref: '#/components/schemas/BaseMfaMethod'
      type: object
      properties:
        name:
          example: Recovery Codes
        type:
          type: string
          enum:
          - recoveryCodes
        codes:
          type: array
          items:
            type: string
            example: [QPF2SBQJ, VK3DKNGM]

    TotpMethod:
      allOf:
        - $ref: '#/components/schemas/BaseMfaMethod'
      type: object
      properties:
        type:
          type: string
          enum:
          - totp
        name:
          example: Google Authenticator
        secret:
          $ref: '#/components/schemas/Hex40'

    MfaRequiredErrorData:
      type: object
      properties:
        token:
          $ref: '#/components/schemas/Hex40'
        tokenExpiresIn:
          type: number
          example: 600000
        methods:
          type: array
          items:
            type: object
            properties:
              id:
                $ref: '#/components/schemas/ObjectId'
              type:
                type: string
                enum:
                - totp
                - recoveryCodes
              name:
                type: string
                example: Google Authenticator
              tags:
                type: array
                items:
                  type: string
                  example: selected

    Hex40:
      type: string
      example: '3e9a827ed143c14e33617315c15789134367224c'

    ErrorResponse:
      type: object
      properties:
        code:
          type: number
          example: 1
        name:
          type: string
          example: 'SERVER_EXCEPTION'
        message:
          type: string
          example: There was an internal server error, please try again!

  parameters:

    rqlOptional:
      schema:
        type: string
      in: query
      name: RQL
      description: Add filters to the requested list.

    rqlRequired:
      schema:
        type: string
      in: query
      name: RQL
      description: Add filters to the requested list, **required**.
      required: true

    userId:
      in: path
      name: userId
      description: Id of the targeted user
      schema:
        $ref: '#/components/schemas/ObjectId'
      required: true

    methodId:
      in: path
      name: methodId
      description: Id of the targeted method
      schema:
        $ref: '#/components/schemas/ObjectId'
      required: true

  responses:

    OperationResult:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              affectedRecords:
                type: number
                example: 1

    OperationSuccessful:
      description: Operation successful
      content:
        application/json:
          schema:
            type: object
            properties:
              affectedRecords:
                type: number
                example: 1
                description: The number of affected records in the operation
